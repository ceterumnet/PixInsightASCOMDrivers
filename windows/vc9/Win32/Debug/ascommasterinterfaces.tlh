// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (19032a95).
//
// c:\pixinsightascomcameradriver\windows\vc9\win32\debug\ascommasterinterfaces.tlh
//
// C++ source equivalent of Win32 type library c:\Program Files (x86)\Common Files\ASCOM\Interface\AscomMasterInterfaces.tlb
// compiler-generated file created 07/23/11 at 18:16:36 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AscomInterfacesLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("76618f90-032f-4424-a680-802467a55742"))
/* LIBID */ __AscomInterfacesLib;
struct __declspec(uuid("221c0bc0-110b-4129-85a0-18bb28579290"))
/* dual interface */ IRate;
struct __declspec(uuid("2b8fd76e-af7e-4faa-9fac-4029e96129f4"))
/* dual interface */ IAxisRates;
struct __declspec(uuid("dc98f1df-315a-43ef-81f6-23f3dd461f58"))
/* dual interface */ ITrackingRates;
enum DriveRates;
struct __declspec(uuid("ef0c67ad-a9d3-4f7b-a635-cd2095517633"))
/* dual interface */ ITelescope;
enum AlignmentModes;
enum EquatorialCoordinateType;
enum PierSide;
enum TelescopeAxes;
enum GuideDirections;
struct __declspec(uuid("c2e3fe9c-01cd-440c-b8e3-c56ee9e4edbc"))
/* dual interface */ IFocuser;
enum ShutterState;
struct __declspec(uuid("ccda0d85-474a-4775-8105-1d513adc3896"))
/* dual interface */ IDome;
struct __declspec(uuid("49003324-8de2-4986-bc7d-4d85e1c4cf6b"))
/* dual interface */ IRotator;
enum CameraStates;
struct __declspec(uuid("d95fbc6e-0705-458b-84c0-57e3295dbcce"))
/* dual interface */ ICamera;
struct __declspec(uuid("756fd725-a6e2-436f-8c7a-67e358622027"))
/* dual interface */ IFilterWheel;
struct __declspec(uuid("44c03033-c60e-4101-856c-aafb0f735f83"))
/* dual interface */ ISwitch;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IRate, __uuidof(IRate));
_COM_SMARTPTR_TYPEDEF(IAxisRates, __uuidof(IAxisRates));
_COM_SMARTPTR_TYPEDEF(ITrackingRates, __uuidof(ITrackingRates));
_COM_SMARTPTR_TYPEDEF(ITelescope, __uuidof(ITelescope));
_COM_SMARTPTR_TYPEDEF(IFocuser, __uuidof(IFocuser));
_COM_SMARTPTR_TYPEDEF(IDome, __uuidof(IDome));
_COM_SMARTPTR_TYPEDEF(IRotator, __uuidof(IRotator));
_COM_SMARTPTR_TYPEDEF(ICamera, __uuidof(ICamera));
_COM_SMARTPTR_TYPEDEF(IFilterWheel, __uuidof(IFilterWheel));
_COM_SMARTPTR_TYPEDEF(ISwitch, __uuidof(ISwitch));

//
// Type library items
//

struct __declspec(uuid("221c0bc0-110b-4129-85a0-18bb28579290"))
IRate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMaximum,put=PutMaximum))
    double Maximum;
    __declspec(property(get=GetMinimum,put=PutMinimum))
    double Minimum;

    //
    // Wrapper methods for error-handling
    //

    void PutMaximum (
        double __MIDL_0084 );
    double GetMaximum ( );
    void PutMinimum (
        double __MIDL_0086 );
    double GetMinimum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ double __MIDL_0084 ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ double * __MIDL_0084 ) = 0;
      virtual HRESULT __stdcall put_Minimum (
        /*[in]*/ double __MIDL_0086 ) = 0;
      virtual HRESULT __stdcall get_Minimum (
        /*[out,retval]*/ double * __MIDL_0086 ) = 0;
};

struct __declspec(uuid("2b8fd76e-af7e-4faa-9fac-4029e96129f4"))
IAxisRates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IRatePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNewEnum))
    IEnumVARIANTPtr NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IRatePtr GetItem (
        long Index );
    IEnumVARIANTPtr GetNewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * __MIDL_0087 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IRate * * __MIDL_0088 ) = 0;
      virtual HRESULT __stdcall get_NewEnum (
        /*[out,retval]*/ struct IEnumVARIANT * * __MIDL_0089 ) = 0;
};

enum __declspec(uuid("d9998808-2df0-4ca1-add6-ce592026c663"))
DriveRates
{
    driveSidereal = 0,
    driveLunar = 1,
    driveSolar = 2,
    driveKing = 3
};

struct __declspec(uuid("dc98f1df-315a-43ef-81f6-23f3dd461f58"))
ITrackingRates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    enum DriveRates Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNewEnum))
    IEnumVARIANTPtr NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    enum DriveRates GetItem (
        long Index );
    IEnumVARIANTPtr GetNewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * __MIDL_0090 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ enum DriveRates * __MIDL_0091 ) = 0;
      virtual HRESULT __stdcall get_NewEnum (
        /*[out,retval]*/ struct IEnumVARIANT * * __MIDL_0092 ) = 0;
};

enum __declspec(uuid("30d18b61-aecc-4c03-8759-e3edd246f062"))
AlignmentModes
{
    algAltAz = 0,
    algPolar = 1,
    algGermanPolar = 2
};

enum __declspec(uuid("135265ba-25ac-4f43-95e5-80d0171e48fa"))
EquatorialCoordinateType
{
    equOther = 0,
    equLocalTopocentric = 1,
    equJ2000 = 2,
    equJ2050 = 3,
    equB1950 = 4
};

enum __declspec(uuid("ecd99531-a2cf-4b9f-91a0-35fe5d12b043"))
PierSide
{
    pierUnknown = -1,
    pierEast = 0,
    pierWest = 1
};

enum __declspec(uuid("bcb5c21d-b0ea-40d1-b36c-272456f44d01"))
TelescopeAxes
{
    axisPrimary = 0,
    axisSecondary = 1,
    axisTertiary = 2
};

enum __declspec(uuid("3613eeeb-5563-47d8-b512-1d36d64ceebb"))
GuideDirections
{
    guideNorth = 0,
    guideSouth = 1,
    guideEast = 2,
    guideWest = 3
};

struct __declspec(uuid("ef0c67ad-a9d3-4f7b-a635-cd2095517633"))
ITelescope : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignmentMode))
    enum AlignmentModes AlignmentMode;
    __declspec(property(get=GetAltitude))
    double Altitude;
    __declspec(property(get=GetApertureArea))
    double ApertureArea;
    __declspec(property(get=GetApertureDiameter))
    double ApertureDiameter;
    __declspec(property(get=GetAtHome))
    VARIANT_BOOL AtHome;
    __declspec(property(get=GetAtPark))
    VARIANT_BOOL AtPark;
    __declspec(property(get=GetAzimuth))
    double Azimuth;
    __declspec(property(get=GetCanFindHome))
    VARIANT_BOOL CanFindHome;
    __declspec(property(get=GetCanPark))
    VARIANT_BOOL CanPark;
    __declspec(property(get=GetCanPulseGuide))
    VARIANT_BOOL CanPulseGuide;
    __declspec(property(get=GetCanSetDeclinationRate))
    VARIANT_BOOL CanSetDeclinationRate;
    __declspec(property(get=GetCanSetGuideRates))
    VARIANT_BOOL CanSetGuideRates;
    __declspec(property(get=GetCanSetPark))
    VARIANT_BOOL CanSetPark;
    __declspec(property(get=GetCanSetRightAscensionRate))
    VARIANT_BOOL CanSetRightAscensionRate;
    __declspec(property(get=GetCanSetPierSide))
    VARIANT_BOOL CanSetPierSide;
    __declspec(property(get=GetCanSetTracking))
    VARIANT_BOOL CanSetTracking;
    __declspec(property(get=GetCanSlew))
    VARIANT_BOOL CanSlew;
    __declspec(property(get=GetCanSlewAltAz))
    VARIANT_BOOL CanSlewAltAz;
    __declspec(property(get=GetCanSlewAltAzAsync))
    VARIANT_BOOL CanSlewAltAzAsync;
    __declspec(property(get=GetCanSlewAsync))
    VARIANT_BOOL CanSlewAsync;
    __declspec(property(get=GetCanSync))
    VARIANT_BOOL CanSync;
    __declspec(property(get=GetCanSyncAltAz))
    VARIANT_BOOL CanSyncAltAz;
    __declspec(property(get=GetCanUnpark))
    VARIANT_BOOL CanUnpark;
    __declspec(property(get=GetConnected,put=PutConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetDeclination))
    double Declination;
    __declspec(property(get=GetDeclinationRate,put=PutDeclinationRate))
    double DeclinationRate;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetDoesRefraction,put=PutDoesRefraction))
    VARIANT_BOOL DoesRefraction;
    __declspec(property(get=GetDriverInfo))
    _bstr_t DriverInfo;
    __declspec(property(get=GetDriverVersion))
    _bstr_t DriverVersion;
    __declspec(property(get=GetEquatorialSystem))
    enum EquatorialCoordinateType EquatorialSystem;
    __declspec(property(get=GetFocalLength))
    double FocalLength;
    __declspec(property(get=GetGuideRateDeclination,put=PutGuideRateDeclination))
    double GuideRateDeclination;
    __declspec(property(get=GetGuideRateRightAscension,put=PutGuideRateRightAscension))
    double GuideRateRightAscension;
    __declspec(property(get=GetInterfaceVersion))
    short InterfaceVersion;
    __declspec(property(get=GetIsPulseGuiding))
    VARIANT_BOOL IsPulseGuiding;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetRightAscension))
    double RightAscension;
    __declspec(property(get=GetRightAscensionRate,put=PutRightAscensionRate))
    double RightAscensionRate;
    __declspec(property(get=GetSideOfPier,put=PutSideOfPier))
    enum PierSide SideOfPier;
    __declspec(property(get=GetSiderealTime))
    double SiderealTime;
    __declspec(property(get=GetSiteElevation,put=PutSiteElevation))
    double SiteElevation;
    __declspec(property(get=GetSiteLatitude,put=PutSiteLatitude))
    double SiteLatitude;
    __declspec(property(get=GetSiteLongitude,put=PutSiteLongitude))
    double SiteLongitude;
    __declspec(property(get=GetSlewing))
    VARIANT_BOOL Slewing;
    __declspec(property(get=GetSlewSettleTime,put=PutSlewSettleTime))
    short SlewSettleTime;
    __declspec(property(get=GetTargetDeclination,put=PutTargetDeclination))
    double TargetDeclination;
    __declspec(property(get=GetTargetRightAscension,put=PutTargetRightAscension))
    double TargetRightAscension;
    __declspec(property(get=GetTracking,put=PutTracking))
    VARIANT_BOOL Tracking;
    __declspec(property(get=GetTrackingRate,put=PutTrackingRate))
    enum DriveRates TrackingRate;
    __declspec(property(get=GetTrackingRates))
    ITrackingRatesPtr TrackingRates;
    __declspec(property(get=GetUTCDate,put=PutUTCDate))
    DATE UTCDate;

    //
    // Wrapper methods for error-handling
    //

    enum AlignmentModes GetAlignmentMode ( );
    double GetAltitude ( );
    double GetApertureArea ( );
    double GetApertureDiameter ( );
    VARIANT_BOOL GetAtHome ( );
    VARIANT_BOOL GetAtPark ( );
    double GetAzimuth ( );
    VARIANT_BOOL GetCanFindHome ( );
    VARIANT_BOOL GetCanPark ( );
    VARIANT_BOOL GetCanPulseGuide ( );
    VARIANT_BOOL GetCanSetDeclinationRate ( );
    VARIANT_BOOL GetCanSetGuideRates ( );
    VARIANT_BOOL GetCanSetPark ( );
    VARIANT_BOOL GetCanSetRightAscensionRate ( );
    VARIANT_BOOL GetCanSetPierSide ( );
    VARIANT_BOOL GetCanSetTracking ( );
    VARIANT_BOOL GetCanSlew ( );
    VARIANT_BOOL GetCanSlewAltAz ( );
    VARIANT_BOOL GetCanSlewAltAzAsync ( );
    VARIANT_BOOL GetCanSlewAsync ( );
    VARIANT_BOOL GetCanSync ( );
    VARIANT_BOOL GetCanSyncAltAz ( );
    VARIANT_BOOL GetCanUnpark ( );
    VARIANT_BOOL GetConnected ( );
    void PutConnected (
        VARIANT_BOOL __MIDL_0033 );
    double GetDeclination ( );
    double GetDeclinationRate ( );
    void PutDeclinationRate (
        double __MIDL_0036 );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetDoesRefraction ( );
    void PutDoesRefraction (
        VARIANT_BOOL __MIDL_0039 );
    _bstr_t GetDriverInfo ( );
    _bstr_t GetDriverVersion ( );
    enum EquatorialCoordinateType GetEquatorialSystem ( );
    double GetFocalLength ( );
    double GetGuideRateDeclination ( );
    void PutGuideRateDeclination (
        double __MIDL_0045 );
    double GetGuideRateRightAscension ( );
    void PutGuideRateRightAscension (
        double __MIDL_0047 );
    short GetInterfaceVersion ( );
    VARIANT_BOOL GetIsPulseGuiding ( );
    _bstr_t GetName ( );
    double GetRightAscension ( );
    double GetRightAscensionRate ( );
    void PutRightAscensionRate (
        double __MIDL_0053 );
    enum PierSide GetSideOfPier ( );
    void PutSideOfPier (
        enum PierSide __MIDL_0055 );
    double GetSiderealTime ( );
    double GetSiteElevation ( );
    void PutSiteElevation (
        double __MIDL_0058 );
    double GetSiteLatitude ( );
    void PutSiteLatitude (
        double __MIDL_0060 );
    double GetSiteLongitude ( );
    void PutSiteLongitude (
        double __MIDL_0062 );
    VARIANT_BOOL GetSlewing ( );
    short GetSlewSettleTime ( );
    void PutSlewSettleTime (
        short __MIDL_0065 );
    double GetTargetDeclination ( );
    void PutTargetDeclination (
        double __MIDL_0067 );
    double GetTargetRightAscension ( );
    void PutTargetRightAscension (
        double __MIDL_0069 );
    VARIANT_BOOL GetTracking ( );
    void PutTracking (
        VARIANT_BOOL __MIDL_0071 );
    enum DriveRates GetTrackingRate ( );
    void PutTrackingRate (
        enum DriveRates __MIDL_0073 );
    ITrackingRatesPtr GetTrackingRates ( );
    DATE GetUTCDate ( );
    void PutUTCDate (
        DATE __MIDL_0076 );
    HRESULT AbortSlew ( );
    IAxisRatesPtr AxisRates (
        enum TelescopeAxes Axis );
    VARIANT_BOOL CanMoveAxis (
        enum TelescopeAxes Axis );
    enum PierSide DestinationSideOfPier (
        double RightAscension,
        double Declination );
    HRESULT FindHome ( );
    HRESULT MoveAxis (
        enum TelescopeAxes Axis,
        double Rate );
    HRESULT Park ( );
    HRESULT PulseGuide (
        enum GuideDirections Direction,
        long Duration );
    HRESULT SetPark ( );
    HRESULT SetupDialog ( );
    HRESULT SlewToAltAz (
        double Azimuth,
        double Altitude );
    HRESULT SlewToAltAzAsync (
        double Azimuth,
        double Altitude );
    HRESULT SlewToCoordinates (
        double RightAscension,
        double Declination );
    HRESULT SlewToCoordinatesAsync (
        double RightAscension,
        double Declination );
    HRESULT SlewToTarget ( );
    HRESULT SlewToTargetAsync ( );
    HRESULT SyncToAltAz (
        double Azimuth,
        double Altitude );
    HRESULT SyncToCoordinates (
        double RightAscension,
        double Declination );
    HRESULT SyncToTarget ( );
    HRESULT Unpark ( );
    HRESULT CommandBlind (
        _bstr_t Command,
        VARIANT_BOOL Raw );
    VARIANT_BOOL CommandBool (
        _bstr_t Command,
        VARIANT_BOOL Raw );
    _bstr_t CommandString (
        _bstr_t Command,
        VARIANT_BOOL Raw );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AlignmentMode (
        /*[out,retval]*/ enum AlignmentModes * __MIDL_0010 ) = 0;
      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * __MIDL_0011 ) = 0;
      virtual HRESULT __stdcall get_ApertureArea (
        /*[out,retval]*/ double * __MIDL_0012 ) = 0;
      virtual HRESULT __stdcall get_ApertureDiameter (
        /*[out,retval]*/ double * __MIDL_0013 ) = 0;
      virtual HRESULT __stdcall get_AtHome (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0014 ) = 0;
      virtual HRESULT __stdcall get_AtPark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0015 ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * __MIDL_0016 ) = 0;
      virtual HRESULT __stdcall get_CanFindHome (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0017 ) = 0;
      virtual HRESULT __stdcall get_CanPark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0018 ) = 0;
      virtual HRESULT __stdcall get_CanPulseGuide (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0019 ) = 0;
      virtual HRESULT __stdcall get_CanSetDeclinationRate (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0020 ) = 0;
      virtual HRESULT __stdcall get_CanSetGuideRates (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0021 ) = 0;
      virtual HRESULT __stdcall get_CanSetPark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0022 ) = 0;
      virtual HRESULT __stdcall get_CanSetRightAscensionRate (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0023 ) = 0;
      virtual HRESULT __stdcall get_CanSetPierSide (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0024 ) = 0;
      virtual HRESULT __stdcall get_CanSetTracking (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0025 ) = 0;
      virtual HRESULT __stdcall get_CanSlew (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0026 ) = 0;
      virtual HRESULT __stdcall get_CanSlewAltAz (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0027 ) = 0;
      virtual HRESULT __stdcall get_CanSlewAltAzAsync (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0028 ) = 0;
      virtual HRESULT __stdcall get_CanSlewAsync (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0029 ) = 0;
      virtual HRESULT __stdcall get_CanSync (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0030 ) = 0;
      virtual HRESULT __stdcall get_CanSyncAltAz (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0031 ) = 0;
      virtual HRESULT __stdcall get_CanUnpark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0032 ) = 0;
      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0033 ) = 0;
      virtual HRESULT __stdcall put_Connected (
        /*[in]*/ VARIANT_BOOL __MIDL_0033 ) = 0;
      virtual HRESULT __stdcall get_Declination (
        /*[out,retval]*/ double * __MIDL_0035 ) = 0;
      virtual HRESULT __stdcall get_DeclinationRate (
        /*[out,retval]*/ double * __MIDL_0036 ) = 0;
      virtual HRESULT __stdcall put_DeclinationRate (
        /*[in]*/ double __MIDL_0036 ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * __MIDL_0038 ) = 0;
      virtual HRESULT __stdcall get_DoesRefraction (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0039 ) = 0;
      virtual HRESULT __stdcall put_DoesRefraction (
        /*[in]*/ VARIANT_BOOL __MIDL_0039 ) = 0;
      virtual HRESULT __stdcall get_DriverInfo (
        /*[out,retval]*/ BSTR * __MIDL_0041 ) = 0;
      virtual HRESULT __stdcall get_DriverVersion (
        /*[out,retval]*/ BSTR * __MIDL_0042 ) = 0;
      virtual HRESULT __stdcall get_EquatorialSystem (
        /*[out,retval]*/ enum EquatorialCoordinateType * __MIDL_0043 ) = 0;
      virtual HRESULT __stdcall get_FocalLength (
        /*[out,retval]*/ double * __MIDL_0044 ) = 0;
      virtual HRESULT __stdcall get_GuideRateDeclination (
        /*[out,retval]*/ double * __MIDL_0045 ) = 0;
      virtual HRESULT __stdcall put_GuideRateDeclination (
        /*[in]*/ double __MIDL_0045 ) = 0;
      virtual HRESULT __stdcall get_GuideRateRightAscension (
        /*[out,retval]*/ double * __MIDL_0047 ) = 0;
      virtual HRESULT __stdcall put_GuideRateRightAscension (
        /*[in]*/ double __MIDL_0047 ) = 0;
      virtual HRESULT __stdcall get_InterfaceVersion (
        /*[out,retval]*/ short * __MIDL_0049 ) = 0;
      virtual HRESULT __stdcall get_IsPulseGuiding (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0050 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * __MIDL_0051 ) = 0;
      virtual HRESULT __stdcall get_RightAscension (
        /*[out,retval]*/ double * __MIDL_0052 ) = 0;
      virtual HRESULT __stdcall get_RightAscensionRate (
        /*[out,retval]*/ double * __MIDL_0053 ) = 0;
      virtual HRESULT __stdcall put_RightAscensionRate (
        /*[in]*/ double __MIDL_0053 ) = 0;
      virtual HRESULT __stdcall get_SideOfPier (
        /*[out,retval]*/ enum PierSide * __MIDL_0055 ) = 0;
      virtual HRESULT __stdcall put_SideOfPier (
        /*[in]*/ enum PierSide __MIDL_0055 ) = 0;
      virtual HRESULT __stdcall get_SiderealTime (
        /*[out,retval]*/ double * __MIDL_0057 ) = 0;
      virtual HRESULT __stdcall get_SiteElevation (
        /*[out,retval]*/ double * __MIDL_0058 ) = 0;
      virtual HRESULT __stdcall put_SiteElevation (
        /*[in]*/ double __MIDL_0058 ) = 0;
      virtual HRESULT __stdcall get_SiteLatitude (
        /*[out,retval]*/ double * __MIDL_0060 ) = 0;
      virtual HRESULT __stdcall put_SiteLatitude (
        /*[in]*/ double __MIDL_0060 ) = 0;
      virtual HRESULT __stdcall get_SiteLongitude (
        /*[out,retval]*/ double * __MIDL_0062 ) = 0;
      virtual HRESULT __stdcall put_SiteLongitude (
        /*[in]*/ double __MIDL_0062 ) = 0;
      virtual HRESULT __stdcall get_Slewing (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0064 ) = 0;
      virtual HRESULT __stdcall get_SlewSettleTime (
        /*[out,retval]*/ short * __MIDL_0065 ) = 0;
      virtual HRESULT __stdcall put_SlewSettleTime (
        /*[in]*/ short __MIDL_0065 ) = 0;
      virtual HRESULT __stdcall get_TargetDeclination (
        /*[out,retval]*/ double * __MIDL_0067 ) = 0;
      virtual HRESULT __stdcall put_TargetDeclination (
        /*[in]*/ double __MIDL_0067 ) = 0;
      virtual HRESULT __stdcall get_TargetRightAscension (
        /*[out,retval]*/ double * __MIDL_0069 ) = 0;
      virtual HRESULT __stdcall put_TargetRightAscension (
        /*[in]*/ double __MIDL_0069 ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0071 ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ VARIANT_BOOL __MIDL_0071 ) = 0;
      virtual HRESULT __stdcall get_TrackingRate (
        /*[out,retval]*/ enum DriveRates * __MIDL_0073 ) = 0;
      virtual HRESULT __stdcall put_TrackingRate (
        /*[in]*/ enum DriveRates __MIDL_0073 ) = 0;
      virtual HRESULT __stdcall get_TrackingRates (
        /*[out,retval]*/ struct ITrackingRates * * __MIDL_0075 ) = 0;
      virtual HRESULT __stdcall get_UTCDate (
        /*[out,retval]*/ DATE * __MIDL_0076 ) = 0;
      virtual HRESULT __stdcall put_UTCDate (
        /*[in]*/ DATE __MIDL_0076 ) = 0;
      virtual HRESULT __stdcall raw_AbortSlew ( ) = 0;
      virtual HRESULT __stdcall raw_AxisRates (
        /*[in]*/ enum TelescopeAxes Axis,
        /*[out,retval]*/ struct IAxisRates * * __MIDL_0078 ) = 0;
      virtual HRESULT __stdcall raw_CanMoveAxis (
        /*[in]*/ enum TelescopeAxes Axis,
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0079 ) = 0;
      virtual HRESULT __stdcall raw_DestinationSideOfPier (
        /*[in]*/ double RightAscension,
        /*[in]*/ double Declination,
        /*[out,retval]*/ enum PierSide * __MIDL_0080 ) = 0;
      virtual HRESULT __stdcall raw_FindHome ( ) = 0;
      virtual HRESULT __stdcall raw_MoveAxis (
        /*[in]*/ enum TelescopeAxes Axis,
        /*[in]*/ double Rate ) = 0;
      virtual HRESULT __stdcall raw_Park ( ) = 0;
      virtual HRESULT __stdcall raw_PulseGuide (
        /*[in]*/ enum GuideDirections Direction,
        /*[in]*/ long Duration ) = 0;
      virtual HRESULT __stdcall raw_SetPark ( ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
      virtual HRESULT __stdcall raw_SlewToAltAz (
        /*[in]*/ double Azimuth,
        /*[in]*/ double Altitude ) = 0;
      virtual HRESULT __stdcall raw_SlewToAltAzAsync (
        /*[in]*/ double Azimuth,
        /*[in]*/ double Altitude ) = 0;
      virtual HRESULT __stdcall raw_SlewToCoordinates (
        /*[in]*/ double RightAscension,
        /*[in]*/ double Declination ) = 0;
      virtual HRESULT __stdcall raw_SlewToCoordinatesAsync (
        /*[in]*/ double RightAscension,
        /*[in]*/ double Declination ) = 0;
      virtual HRESULT __stdcall raw_SlewToTarget ( ) = 0;
      virtual HRESULT __stdcall raw_SlewToTargetAsync ( ) = 0;
      virtual HRESULT __stdcall raw_SyncToAltAz (
        /*[in]*/ double Azimuth,
        /*[in]*/ double Altitude ) = 0;
      virtual HRESULT __stdcall raw_SyncToCoordinates (
        /*[in]*/ double RightAscension,
        /*[in]*/ double Declination ) = 0;
      virtual HRESULT __stdcall raw_SyncToTarget ( ) = 0;
      virtual HRESULT __stdcall raw_Unpark ( ) = 0;
      virtual HRESULT __stdcall raw_CommandBlind (
        /*[in]*/ BSTR Command,
        /*[in]*/ VARIANT_BOOL Raw ) = 0;
      virtual HRESULT __stdcall raw_CommandBool (
        /*[in]*/ BSTR Command,
        /*[in]*/ VARIANT_BOOL Raw,
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0081 ) = 0;
      virtual HRESULT __stdcall raw_CommandString (
        /*[in]*/ BSTR Command,
        /*[in]*/ VARIANT_BOOL Raw,
        /*[out,retval]*/ BSTR * __MIDL_0082 ) = 0;
};

struct __declspec(uuid("c2e3fe9c-01cd-440c-b8e3-c56ee9e4edbc"))
IFocuser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAbsolute))
    VARIANT_BOOL Absolute;
    __declspec(property(get=GetIsMoving))
    VARIANT_BOOL IsMoving;
    __declspec(property(get=GetLink,put=PutLink))
    VARIANT_BOOL Link;
    __declspec(property(get=GetMaxIncrement))
    long MaxIncrement;
    __declspec(property(get=GetMaxStep))
    long MaxStep;
    __declspec(property(get=GetPosition))
    long Position;
    __declspec(property(get=GetStepSize))
    double StepSize;
    __declspec(property(get=GetTempComp,put=PutTempComp))
    VARIANT_BOOL TempComp;
    __declspec(property(get=GetTempCompAvailable))
    VARIANT_BOOL TempCompAvailable;
    __declspec(property(get=GetTemperature))
    double Temperature;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAbsolute ( );
    VARIANT_BOOL GetIsMoving ( );
    VARIANT_BOOL GetLink ( );
    void PutLink (
        VARIANT_BOOL __MIDL_0095 );
    long GetMaxIncrement ( );
    long GetMaxStep ( );
    long GetPosition ( );
    double GetStepSize ( );
    VARIANT_BOOL GetTempComp ( );
    void PutTempComp (
        VARIANT_BOOL __MIDL_0101 );
    VARIANT_BOOL GetTempCompAvailable ( );
    double GetTemperature ( );
    HRESULT Halt ( );
    HRESULT SetupDialog ( );
    HRESULT Move (
        long val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Absolute (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0093 ) = 0;
      virtual HRESULT __stdcall get_IsMoving (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0094 ) = 0;
      virtual HRESULT __stdcall get_Link (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0095 ) = 0;
      virtual HRESULT __stdcall put_Link (
        /*[in]*/ VARIANT_BOOL __MIDL_0095 ) = 0;
      virtual HRESULT __stdcall get_MaxIncrement (
        /*[out,retval]*/ long * __MIDL_0097 ) = 0;
      virtual HRESULT __stdcall get_MaxStep (
        /*[out,retval]*/ long * __MIDL_0098 ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * __MIDL_0099 ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ double * __MIDL_0100 ) = 0;
      virtual HRESULT __stdcall get_TempComp (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0101 ) = 0;
      virtual HRESULT __stdcall put_TempComp (
        /*[in]*/ VARIANT_BOOL __MIDL_0101 ) = 0;
      virtual HRESULT __stdcall get_TempCompAvailable (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0103 ) = 0;
      virtual HRESULT __stdcall get_Temperature (
        /*[out,retval]*/ double * __MIDL_0104 ) = 0;
      virtual HRESULT __stdcall raw_Halt ( ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ long val ) = 0;
};

enum __declspec(uuid("8915df3d-b055-4195-8d23-aad7f58fdf3b"))
ShutterState
{
    shutterOpen = 0,
    shutterClosed = 1,
    shutterOpening = 2,
    shutterClosing = 3,
    shutterError = 4
};

struct __declspec(uuid("ccda0d85-474a-4775-8105-1d513adc3896"))
IDome : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAltitude))
    double Altitude;
    __declspec(property(get=GetAtHome))
    VARIANT_BOOL AtHome;
    __declspec(property(get=GetAtPark))
    VARIANT_BOOL AtPark;
    __declspec(property(get=GetAzimuth))
    double Azimuth;
    __declspec(property(get=GetCanFindHome))
    VARIANT_BOOL CanFindHome;
    __declspec(property(get=GetCanPark))
    VARIANT_BOOL CanPark;
    __declspec(property(get=GetCanSetAltitude))
    VARIANT_BOOL CanSetAltitude;
    __declspec(property(get=GetCanSetAzimuth))
    VARIANT_BOOL CanSetAzimuth;
    __declspec(property(get=GetCanSetPark))
    VARIANT_BOOL CanSetPark;
    __declspec(property(get=GetCanSetShutter))
    VARIANT_BOOL CanSetShutter;
    __declspec(property(get=GetCanSlave))
    VARIANT_BOOL CanSlave;
    __declspec(property(get=GetCanSyncAzimuth))
    VARIANT_BOOL CanSyncAzimuth;
    __declspec(property(get=GetConnected,put=PutConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetDriverInfo))
    _bstr_t DriverInfo;
    __declspec(property(get=GetInterfaceVersion))
    short InterfaceVersion;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSlaved,put=PutSlaved))
    VARIANT_BOOL Slaved;
    __declspec(property(get=GetShutterStatus))
    enum ShutterState ShutterStatus;
    __declspec(property(get=GetSlewing))
    VARIANT_BOOL Slewing;

    //
    // Wrapper methods for error-handling
    //

    double GetAltitude ( );
    VARIANT_BOOL GetAtHome ( );
    VARIANT_BOOL GetAtPark ( );
    double GetAzimuth ( );
    VARIANT_BOOL GetCanFindHome ( );
    VARIANT_BOOL GetCanPark ( );
    VARIANT_BOOL GetCanSetAltitude ( );
    VARIANT_BOOL GetCanSetAzimuth ( );
    VARIANT_BOOL GetCanSetPark ( );
    VARIANT_BOOL GetCanSetShutter ( );
    VARIANT_BOOL GetCanSlave ( );
    VARIANT_BOOL GetCanSyncAzimuth ( );
    VARIANT_BOOL GetConnected ( );
    void PutConnected (
        VARIANT_BOOL __MIDL_0117 );
    _bstr_t GetDescription ( );
    _bstr_t GetDriverInfo ( );
    short GetInterfaceVersion ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetSlaved ( );
    void PutSlaved (
        VARIANT_BOOL __MIDL_0123 );
    enum ShutterState GetShutterStatus ( );
    VARIANT_BOOL GetSlewing ( );
    HRESULT AbortSlew ( );
    HRESULT CloseShutter ( );
    HRESULT FindHome ( );
    HRESULT OpenShutter ( );
    HRESULT Park ( );
    HRESULT SetPark ( );
    HRESULT SetupDialog ( );
    HRESULT SlewToAltitude (
        double Altitude );
    HRESULT SlewToAzimuth (
        double Azimuth );
    HRESULT SyncToAzimuth (
        double Azimuth );
    HRESULT CommandBlind (
        _bstr_t Command );
    VARIANT_BOOL CommandBool (
        _bstr_t Command );
    _bstr_t CommandString (
        _bstr_t Command );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Altitude (
        /*[out,retval]*/ double * __MIDL_0105 ) = 0;
      virtual HRESULT __stdcall get_AtHome (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0106 ) = 0;
      virtual HRESULT __stdcall get_AtPark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0107 ) = 0;
      virtual HRESULT __stdcall get_Azimuth (
        /*[out,retval]*/ double * __MIDL_0108 ) = 0;
      virtual HRESULT __stdcall get_CanFindHome (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0109 ) = 0;
      virtual HRESULT __stdcall get_CanPark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0110 ) = 0;
      virtual HRESULT __stdcall get_CanSetAltitude (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0111 ) = 0;
      virtual HRESULT __stdcall get_CanSetAzimuth (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0112 ) = 0;
      virtual HRESULT __stdcall get_CanSetPark (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0113 ) = 0;
      virtual HRESULT __stdcall get_CanSetShutter (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0114 ) = 0;
      virtual HRESULT __stdcall get_CanSlave (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0115 ) = 0;
      virtual HRESULT __stdcall get_CanSyncAzimuth (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0116 ) = 0;
      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0117 ) = 0;
      virtual HRESULT __stdcall put_Connected (
        /*[in]*/ VARIANT_BOOL __MIDL_0117 ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * __MIDL_0119 ) = 0;
      virtual HRESULT __stdcall get_DriverInfo (
        /*[out,retval]*/ BSTR * __MIDL_0120 ) = 0;
      virtual HRESULT __stdcall get_InterfaceVersion (
        /*[out,retval]*/ short * __MIDL_0121 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * __MIDL_0122 ) = 0;
      virtual HRESULT __stdcall get_Slaved (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0123 ) = 0;
      virtual HRESULT __stdcall put_Slaved (
        /*[in]*/ VARIANT_BOOL __MIDL_0123 ) = 0;
      virtual HRESULT __stdcall get_ShutterStatus (
        /*[out,retval]*/ enum ShutterState * __MIDL_0125 ) = 0;
      virtual HRESULT __stdcall get_Slewing (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0126 ) = 0;
      virtual HRESULT __stdcall raw_AbortSlew ( ) = 0;
      virtual HRESULT __stdcall raw_CloseShutter ( ) = 0;
      virtual HRESULT __stdcall raw_FindHome ( ) = 0;
      virtual HRESULT __stdcall raw_OpenShutter ( ) = 0;
      virtual HRESULT __stdcall raw_Park ( ) = 0;
      virtual HRESULT __stdcall raw_SetPark ( ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
      virtual HRESULT __stdcall raw_SlewToAltitude (
        /*[in]*/ double Altitude ) = 0;
      virtual HRESULT __stdcall raw_SlewToAzimuth (
        /*[in]*/ double Azimuth ) = 0;
      virtual HRESULT __stdcall raw_SyncToAzimuth (
        /*[in]*/ double Azimuth ) = 0;
      virtual HRESULT __stdcall raw_CommandBlind (
        /*[in]*/ BSTR Command ) = 0;
      virtual HRESULT __stdcall raw_CommandBool (
        /*[in]*/ BSTR Command,
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0127 ) = 0;
      virtual HRESULT __stdcall raw_CommandString (
        /*[in]*/ BSTR Command,
        /*[out,retval]*/ BSTR * __MIDL_0128 ) = 0;
};

struct __declspec(uuid("49003324-8de2-4986-bc7d-4d85e1c4cf6b"))
IRotator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCanReverse))
    VARIANT_BOOL CanReverse;
    __declspec(property(get=GetConnected,put=PutConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetIsMoving))
    VARIANT_BOOL IsMoving;
    __declspec(property(get=GetPosition))
    float Position;
    __declspec(property(get=GetReverse,put=PutReverse))
    VARIANT_BOOL Reverse;
    __declspec(property(get=GetStepSize))
    float StepSize;
    __declspec(property(get=GetTargetPosition))
    float TargetPosition;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetCanReverse ( );
    VARIANT_BOOL GetConnected ( );
    void PutConnected (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsMoving ( );
    float GetPosition ( );
    VARIANT_BOOL GetReverse ( );
    void PutReverse (
        VARIANT_BOOL pVal );
    float GetStepSize ( );
    float GetTargetPosition ( );
    HRESULT Halt ( );
    HRESULT Move (
        float Position );
    HRESULT MoveAbsolute (
        float Position );
    HRESULT SetupDialog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CanReverse (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Connected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsMoving (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_StepSize (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall get_TargetPosition (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall raw_Halt ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        float Position ) = 0;
      virtual HRESULT __stdcall raw_MoveAbsolute (
        float Position ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
};

enum __declspec(uuid("d40eb54d-0f0f-406d-b68f-c2a7984235bc"))
CameraStates
{
    cameraIdle = 0,
    cameraWaiting = 1,
    cameraExposing = 2,
    cameraReading = 3,
    cameraDownload = 4,
    cameraError = 5
};

struct __declspec(uuid("d95fbc6e-0705-458b-84c0-57e3295dbcce"))
ICamera : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeatSinkTemperature))
    double HeatSinkTemperature;
    __declspec(property(get=GetImageArray))
    _variant_t ImageArray;
    __declspec(property(get=GetImageArrayVariant))
    _variant_t ImageArrayVariant;
    __declspec(property(get=GetImageReady))
    VARIANT_BOOL ImageReady;
    __declspec(property(get=GetIsPulseGuiding))
    VARIANT_BOOL IsPulseGuiding;
    __declspec(property(get=GetLastError))
    _bstr_t LastError;
    __declspec(property(get=GetLastExposureDuration))
    double LastExposureDuration;
    __declspec(property(get=GetLastExposureStartTime))
    _bstr_t LastExposureStartTime;
    __declspec(property(get=GetMaxADU))
    long MaxADU;
    __declspec(property(get=GetMaxBinX))
    short MaxBinX;
    __declspec(property(get=GetMaxBinY))
    short MaxBinY;
    __declspec(property(get=GetNumX,put=PutNumX))
    long NumX;
    __declspec(property(get=GetNumY,put=PutNumY))
    long NumY;
    __declspec(property(get=GetPixelSizeX))
    double PixelSizeX;
    __declspec(property(get=GetPixelSizeY))
    double PixelSizeY;
    __declspec(property(get=GetSetCCDTemperature,put=PutSetCCDTemperature))
    double SetCCDTemperature;
    __declspec(property(get=GetStartX,put=PutStartX))
    long StartX;
    __declspec(property(get=GetStartY,put=PutStartY))
    long StartY;
    __declspec(property(get=GetBinX,put=PutBinX))
    short BinX;
    __declspec(property(get=GetBinY,put=PutBinY))
    short BinY;
    __declspec(property(get=GetCameraState))
    enum CameraStates CameraState;
    __declspec(property(get=GetCameraXSize))
    long CameraXSize;
    __declspec(property(get=GetCameraYSize))
    long CameraYSize;
    __declspec(property(get=GetCanAbortExposure))
    VARIANT_BOOL CanAbortExposure;
    __declspec(property(get=GetCanAsymmetricBin))
    VARIANT_BOOL CanAsymmetricBin;
    __declspec(property(get=GetCanGetCoolerPower))
    VARIANT_BOOL CanGetCoolerPower;
    __declspec(property(get=GetCanPulseGuide))
    VARIANT_BOOL CanPulseGuide;
    __declspec(property(get=GetCanSetCCDTemperature))
    VARIANT_BOOL CanSetCCDTemperature;
    __declspec(property(get=GetCanStopExposure))
    VARIANT_BOOL CanStopExposure;
    __declspec(property(get=GetCCDTemperature))
    double CCDTemperature;
    __declspec(property(get=GetConnected,put=PutConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetCoolerOn,put=PutCoolerOn))
    VARIANT_BOOL CoolerOn;
    __declspec(property(get=GetCoolerPower))
    double CoolerPower;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetElectronsPerADU))
    double ElectronsPerADU;
    __declspec(property(get=GetFullWellCapacity))
    double FullWellCapacity;
    __declspec(property(get=GetHasShutter))
    VARIANT_BOOL HasShutter;

    //
    // Wrapper methods for error-handling
    //

    short GetBinX ( );
    void PutBinX (
        short pVal );
    short GetBinY ( );
    void PutBinY (
        short pVal );
    enum CameraStates GetCameraState ( );
    long GetCameraXSize ( );
    long GetCameraYSize ( );
    VARIANT_BOOL GetCanAbortExposure ( );
    VARIANT_BOOL GetCanAsymmetricBin ( );
    VARIANT_BOOL GetCanGetCoolerPower ( );
    VARIANT_BOOL GetCanPulseGuide ( );
    VARIANT_BOOL GetCanSetCCDTemperature ( );
    VARIANT_BOOL GetCanStopExposure ( );
    double GetCCDTemperature ( );
    VARIANT_BOOL GetConnected ( );
    void PutConnected (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCoolerOn ( );
    void PutCoolerOn (
        VARIANT_BOOL pVal );
    double GetCoolerPower ( );
    _bstr_t GetDescription ( );
    double GetElectronsPerADU ( );
    double GetFullWellCapacity ( );
    VARIANT_BOOL GetHasShutter ( );
    double GetHeatSinkTemperature ( );
    _variant_t GetImageArray ( );
    _variant_t GetImageArrayVariant ( );
    VARIANT_BOOL GetImageReady ( );
    VARIANT_BOOL GetIsPulseGuiding ( );
    _bstr_t GetLastError ( );
    double GetLastExposureDuration ( );
    _bstr_t GetLastExposureStartTime ( );
    long GetMaxADU ( );
    short GetMaxBinX ( );
    short GetMaxBinY ( );
    long GetNumX ( );
    void PutNumX (
        long pVal );
    long GetNumY ( );
    void PutNumY (
        long pVal );
    double GetPixelSizeX ( );
    double GetPixelSizeY ( );
    double GetSetCCDTemperature ( );
    void PutSetCCDTemperature (
        double pVal );
    long GetStartX ( );
    void PutStartX (
        long pVal );
    long GetStartY ( );
    void PutStartY (
        long pVal );
    HRESULT AbortExposure ( );
    HRESULT PulseGuide (
        enum GuideDirections Direction,
        long Duration );
    HRESULT SetupDialog ( );
    HRESULT StartExposure (
        double Duration,
        VARIANT_BOOL Light );
    HRESULT StopExposure ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BinX (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_BinX (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_BinY (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_BinY (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_CameraState (
        /*[out,retval]*/ enum CameraStates * pVal ) = 0;
      virtual HRESULT __stdcall get_CameraXSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CameraYSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CanAbortExposure (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanAsymmetricBin (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanGetCoolerPower (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanPulseGuide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanSetCCDTemperature (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanStopExposure (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CCDTemperature (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Connected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CoolerOn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CoolerOn (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CoolerPower (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ElectronsPerADU (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_FullWellCapacity (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_HasShutter (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_HeatSinkTemperature (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageArray (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageArrayVariant (
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall get_ImageReady (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsPulseGuiding (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LastExposureDuration (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_LastExposureStartTime (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxADU (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxBinX (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_MaxBinY (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall get_NumX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NumY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_NumY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PixelSizeX (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_PixelSizeY (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall get_SetCCDTemperature (
        /*[out,retval]*/ double * pVal ) = 0;
      virtual HRESULT __stdcall put_SetCCDTemperature (
        /*[in]*/ double pVal ) = 0;
      virtual HRESULT __stdcall get_StartX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StartX (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_StartY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_StartY (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_AbortExposure ( ) = 0;
      virtual HRESULT __stdcall raw_PulseGuide (
        /*[in]*/ enum GuideDirections Direction,
        /*[in]*/ long Duration ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
      virtual HRESULT __stdcall raw_StartExposure (
        /*[in]*/ double Duration,
        /*[in]*/ VARIANT_BOOL Light ) = 0;
      virtual HRESULT __stdcall raw_StopExposure ( ) = 0;
};

struct __declspec(uuid("756fd725-a6e2-436f-8c7a-67e358622027"))
IFilterWheel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConnected,put=PutConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetFocusOffsets))
    SAFEARRAY * FocusOffsets;
    __declspec(property(get=GetPosition,put=PutPosition))
    short Position;
    __declspec(property(get=GetNames))
    SAFEARRAY * Names;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetConnected ( );
    void PutConnected (
        VARIANT_BOOL pVal );
    SAFEARRAY * GetFocusOffsets ( );
    short GetPosition ( );
    void PutPosition (
        short pVal );
    SAFEARRAY * GetNames ( );
    HRESULT SetupDialog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Connected (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FocusOffsets (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ SAFEARRAY * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
};

struct __declspec(uuid("44c03033-c60e-4101-856c-aafb0f735f83"))
ISwitch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConnected,put=PutConnected))
    VARIANT_BOOL Connected;
    __declspec(property(get=GetDriverInfo))
    _bstr_t DriverInfo;
    __declspec(property(get=GetDriverVersion))
    _bstr_t DriverVersion;
    __declspec(property(get=GetInterfaceVersion))
    short InterfaceVersion;
    __declspec(property(get=GetMaxSwitch))
    short MaxSwitch;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetConnected ( );
    void PutConnected (
        VARIANT_BOOL __MIDL_0129 );
    _bstr_t GetDescription ( );
    _bstr_t GetDriverInfo ( );
    _bstr_t GetDriverVersion ( );
    short GetInterfaceVersion ( );
    short GetMaxSwitch ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetSwitch (
        short ID );
    HRESULT SetSwitch (
        short ID,
        VARIANT_BOOL State );
    HRESULT SetupDialog ( );
    _bstr_t GetSwitchName (
        short ID );
    HRESULT SetSwitchName (
        short ID,
        _bstr_t State );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Connected (
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0129 ) = 0;
      virtual HRESULT __stdcall put_Connected (
        /*[in]*/ VARIANT_BOOL __MIDL_0129 ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * __MIDL_0131 ) = 0;
      virtual HRESULT __stdcall get_DriverInfo (
        /*[out,retval]*/ BSTR * __MIDL_0132 ) = 0;
      virtual HRESULT __stdcall get_DriverVersion (
        /*[out,retval]*/ BSTR * __MIDL_0133 ) = 0;
      virtual HRESULT __stdcall get_InterfaceVersion (
        /*[out,retval]*/ short * __MIDL_0134 ) = 0;
      virtual HRESULT __stdcall get_MaxSwitch (
        /*[out,retval]*/ short * __MIDL_0135 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * __MIDL_0136 ) = 0;
      virtual HRESULT __stdcall raw_GetSwitch (
        /*[in]*/ short ID,
        /*[out,retval]*/ VARIANT_BOOL * __MIDL_0137 ) = 0;
      virtual HRESULT __stdcall raw_SetSwitch (
        /*[in]*/ short ID,
        /*[in]*/ VARIANT_BOOL State ) = 0;
      virtual HRESULT __stdcall raw_SetupDialog ( ) = 0;
      virtual HRESULT __stdcall raw_GetSwitchName (
        /*[in]*/ short ID,
        /*[out,retval]*/ BSTR * __MIDL_0138 ) = 0;
      virtual HRESULT __stdcall raw_SetSwitchName (
        /*[in]*/ short ID,
        /*[in]*/ BSTR State ) = 0;
};

//
// Wrapper method implementations
//

#include "c:\pixinsightascomcameradriver\windows\vc9\win32\debug\ascommasterinterfaces.tli"

} // namespace AscomInterfacesLib

#pragma pack(pop)
